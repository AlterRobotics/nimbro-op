From 5b4594ab50dbb01d6ec291b265f2f013a86ffae1 Mon Sep 17 00:00:00 2001
From: Max Schwarz <Max@x-quadraht.de>
Date: Sat, 6 Oct 2012 15:28:20 +0200
Subject: [PATCH 18/26] Walking: joystick support

---
 Framework/include/Walking.h              |   15 ++++++++
 Framework/src/motion/modules/Walking.cpp |   33 ++++++++++++++---
 Linux/build/JoystickLinux.cpp            |   57 ++++++++++++++++++++++++++++++
 Linux/build/Makefile                     |    3 +-
 Linux/include/Joystick.h                 |   34 ++++++++++++++++++
 Linux/project/walk_tuner/main.cpp        |   26 ++++++++++++--
 6 files changed, 160 insertions(+), 8 deletions(-)
 create mode 100644 Linux/build/JoystickLinux.cpp
 create mode 100644 Linux/include/Joystick.h

diff --git a/Framework/include/Walking.h b/Framework/include/Walking.h
index bd7760a..3e4650f 100644
--- a/Framework/include/Walking.h
+++ b/Framework/include/Walking.h
@@ -12,6 +12,8 @@
 
 #include "minIni.h"
 #include "MotionModule.h"
+#include "Joystick.h"
+
 
 #define WALKING_SECTION "Walking Config"
 #define INVALID_VALUE   -1024.0
@@ -31,6 +33,7 @@ namespace Robot
 
 	private:
 		static Walking* m_UniqueInstance;
+		Joystick *m_stick;
 
 		double m_PeriodTime;
 		double m_DSP_Ratio;
@@ -103,6 +106,7 @@ namespace Robot
         FILE* m_balanceLog;
 
         Walking();
+		
 
 		double wsin(double time, double period, double period_shift, double mag, double mag_shift);
 		bool computeIK(double *out, double x, double y, double z, double a, double b, double c);
@@ -112,6 +116,11 @@ namespace Robot
         double splineBalance(double angle, double vel, double gain);
 
 	public:
+		
+		
+		
+		
+		
 		// Walking initial pose
 		double X_OFFSET;
 		double Y_OFFSET;
@@ -157,6 +166,12 @@ namespace Robot
 		int    I_GAIN;
 		int    D_GAIN;
 
+		
+		
+		void useJoystick();
+		
+		
+		
 		int GetCurrentPhase()		{ return m_Phase; }
 		double GetBodySwingY()		{ return m_Body_Swing_Y; }
 		double GetBodySwingZ()		{ return m_Body_Swing_Z; }
diff --git a/Framework/src/motion/modules/Walking.cpp b/Framework/src/motion/modules/Walking.cpp
index ea2c93e..267721f 100644
--- a/Framework/src/motion/modules/Walking.cpp
+++ b/Framework/src/motion/modules/Walking.cpp
@@ -25,9 +25,10 @@ Walking* Walking::m_UniqueInstance = new Walking();
 
 Walking::Walking()
 {
-	X_OFFSET = -10;
-	Y_OFFSET = 5;
-	Z_OFFSET = 20;
+    m_stick = NULL;
+    X_OFFSET = -10;
+    Y_OFFSET = 5;
+    Z_OFFSET = 20;
     R_OFFSET = 0;
 	P_OFFSET = 0;
     A_OFFSET = 0;
@@ -443,7 +444,7 @@ bool Walking::IsRunning()
 
 void Walking::Process()
 {
-	double x_swap, y_swap, z_swap, a_swap, b_swap, c_swap;
+    double x_swap, y_swap, z_swap, a_swap, b_swap, c_swap;
     double x_move_r, y_move_r, z_move_r, a_move_r, b_move_r, c_move_r;
     double x_move_l, y_move_l, z_move_l, a_move_l, b_move_l, c_move_l;
     double pelvis_offset_r, pelvis_offset_l;
@@ -455,6 +456,19 @@ void Walking::Process()
 	double initAngle[14] = {   0.0,       0.0,        0.0,       0.0,        0.0,          0.0,         0.0,       0.0,        0.0,        0.0,       0.0,          0.0,       -25.0,       25.0};
 	int outValue[14];
 
+    // Use joystick values if available & wanted
+    if(m_stick) {
+        m_stick->update();
+        X_MOVE_AMPLITUDE = -m_stick->axis[1] * 20;
+
+        A_MOVE_AMPLITUDE = -m_stick->axis[2] * 35;
+        Y_MOVE_AMPLITUDE = m_stick->axis[0] * 25;
+        if(m_stick->button[0])
+            Start();
+        if(m_stick->button[1])
+            Stop();
+    }
+
     // Update walk parameters
     if(m_Time == 0)
     {
@@ -732,7 +746,7 @@ void Walking::Process()
 
 	for(int id = JointData::ID_R_HIP_YAW; id <= JointData::ID_L_ANKLE_ROLL; id++)
 	{
-	    m_Joint.SetPGain(id, P_GAIN);
+        m_Joint.SetPGain(id, P_GAIN);
         m_Joint.SetIGain(id, I_GAIN);
         m_Joint.SetDGain(id, D_GAIN);
     }
@@ -754,3 +768,12 @@ double Walking::splineBalance(double angle, double vel, double gain)
 
     return offset;
 }
+
+void Walking::useJoystick() {
+    m_stick = new Joystick();
+    if(!m_stick->init())
+    {
+        delete m_stick;
+        m_stick = 0;
+    }
+}
diff --git a/Linux/build/JoystickLinux.cpp b/Linux/build/JoystickLinux.cpp
new file mode 100644
index 0000000..0c11155
--- /dev/null
+++ b/Linux/build/JoystickLinux.cpp
@@ -0,0 +1,57 @@
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <linux/joystick.h>
+
+#include "Joystick.h"
+
+
+Joystick::Joystick()
+{
+	jd = -1;
+
+	for(int i = 0; i < numOfAxes; ++i)
+		axis[i] = 0;
+	for(int i = 0; i < numOfButtons; ++i)
+		button[i] = false;
+}
+
+Joystick::~Joystick()
+{
+	if (jd != -1)
+		close(jd);
+}
+
+// Initializes the joystick with the first joystick found.
+// Returns true on success and false if no joystick was found.
+bool Joystick::init()
+{
+	jd = open("/dev/input/js0", O_RDONLY | O_NONBLOCK);
+
+	if (jd != -1)
+		return true;
+	return false;
+}
+
+// Polls the joystick state. Returns true on success and false on error (e.g. the joystick was disconnected).
+bool Joystick::update()
+{
+	if (jd == -1)
+		return false;
+
+	struct js_event e;
+	ssize_t ret;
+	while((ret = read(jd, &e, sizeof(struct js_event))) > 0)
+	{
+		// button press or release event
+		if (e.type & JS_EVENT_BUTTON && e.number < numOfButtons)
+			button[e.number] = e.value ? true : false;
+
+		// axis position changed
+		else if (e.type & JS_EVENT_AXIS && e.number < numOfAxes)
+			axis[e.number] = (float)e.value/32767.0;
+	}
+
+	return true;
+}
diff --git a/Linux/build/Makefile b/Linux/build/Makefile
index c87094b..7775eb7 100644
--- a/Linux/build/Makefile
+++ b/Linux/build/Makefile
@@ -47,7 +47,8 @@ OBJS =  ../../Framework/src/CM730.o     	\
         LinuxCamera.o   \
         LinuxCM730.o    \
         LinuxMotionTimer.o    \
-        LinuxNetwork.o
+        LinuxNetwork.o \
+        JoystickLinux.o
 
 $(TARGET): $(OBJS)
 	$(AR) $(ARFLAGS) ../lib/$(TARGET) $(OBJS)
diff --git a/Linux/include/Joystick.h b/Linux/include/Joystick.h
new file mode 100644
index 0000000..7518e88
--- /dev/null
+++ b/Linux/include/Joystick.h
@@ -0,0 +1,34 @@
+#ifndef Joystick_H
+#define Joystick_H
+
+/**
+ * A joystick interface class.
+ * Call init() to connect with the joystick.
+ * Call update() to poll the joystick state.
+ * The bool button[] array contains the button info (pressed or not)
+ * and the float axis[] array contain axis info in the range [-1:1].
+ */
+class Joystick
+{
+public:
+
+	static const int numOfAxes = 4; /**< Number of supported axes. */
+	static const int numOfButtons = 32; /**< Number of supported buttons. */
+
+	bool button[numOfButtons];
+	float axis[numOfAxes];
+
+	Joystick();
+	~Joystick();
+
+	// Initialize the joystick connection.
+	bool init();
+
+	// Poll the joystick state.
+	bool update();
+
+private:
+	int jd;
+};
+
+#endif //Joystick_H
diff --git a/Linux/project/walk_tuner/main.cpp b/Linux/project/walk_tuner/main.cpp
index 3a6c5f2..eacf669 100644
--- a/Linux/project/walk_tuner/main.cpp
+++ b/Linux/project/walk_tuner/main.cpp
@@ -10,6 +10,9 @@
 #include "cmd_process.h"
 #include "mjpg_streamer.h"
 
+#include "Joystick.h"
+#include "Walking.h"
+
 #define INI_FILE_PATH       "../../../Data/config.ini"
 
 using namespace Robot;
@@ -57,20 +60,25 @@ int main(int argc, char *argv[])
         return 0;
     }
 
+ 
     Walking::GetInstance()->LoadINISettings(ini);
-	MotionManager::GetInstance()->LoadINISettings(ini);
+    MotionManager::GetInstance()->LoadINISettings(ini);
     MotionManager::GetInstance()->AddModule((MotionModule*)Walking::GetInstance());
     LinuxMotionTimer *motion_timer = new LinuxMotionTimer(MotionManager::GetInstance());
     motion_timer->Start();
-    /////////////////////////////////////////////////////////////////////
+    ///////////////////////////////////////////////s//////////////////////
 
     DrawIntro(&cm730);
     MotionManager::GetInstance()->SetEnable(true);
 
     MotionManager::GetInstance()->ResetGyroCalibration();
+    Walking::GetInstance()->useJoystick();
 
     while(1)
     {
+		
+		
+		
         int ch = _getch();
         if(ch == 0x1b)
         {
@@ -107,6 +115,19 @@ int main(int argc, char *argv[])
 
             int idx = 0;
 
+
+            
+
+
+
+
+
+
+
+
+
+
+
             BeginCommandMode();
 
             printf("%c", ch);
@@ -187,3 +208,4 @@ int main(int argc, char *argv[])
 
     return 0;
 }
+
-- 
1.7.9.5

