From d654fd5272969ecf751a212568eed5f2490c5298 Mon Sep 17 00:00:00 2001
From: sebastian <sebastian>
Date: Fri, 12 Oct 2012 12:30:50 +0200
Subject: [PATCH 18/25] Framework: add UDP state publisher

---
 Framework/include/MotionManager.h      |   12 +++
 Framework/include/State.h              |   94 ++++++++++++++++++
 Framework/src/State.cpp                |  166 ++++++++++++++++++++++++++++++++
 Framework/src/motion/MotionManager.cpp |   44 ++++++++-
 Framework/src/vision/BallTracker.cpp   |   25 +++--
 Linux/build/Makefile                   |    1 +
 6 files changed, 334 insertions(+), 8 deletions(-)
 create mode 100644 Framework/include/State.h
 create mode 100644 Framework/src/State.cpp

diff --git a/Framework/include/MotionManager.h b/Framework/include/MotionManager.h
index 71aebd5..4a53aa7 100644
--- a/Framework/include/MotionManager.h
+++ b/Framework/include/MotionManager.h
@@ -11,6 +11,7 @@
 #include <list>
 #include <fstream>
 #include <iostream>
+#include <sys/time.h>
 #include "MotionStatus.h"
 #include "MotionModule.h"
 #include "CM730.h"
@@ -22,6 +23,8 @@
 #define INVALID_VALUE   -1024.0
 #define ACCEL_WINDOW_SIZE   30
 
+#include <arpa/inet.h>
+
 namespace Robot
 {
 	class MotionManager
@@ -45,6 +48,9 @@ namespace Robot
 
 		FILE* m_voltageLog;
 
+		int m_udpSocket;
+		sockaddr_in m_udpAddr;
+
 		std::ofstream m_LogFileStream;
 
 		unsigned int m_torqueAdaptionCounter;
@@ -57,9 +63,15 @@ namespace Robot
 
 		bool m_fallProtectionEnabled;
 
+		timeval m_stamp_init;
+		timeval m_stamp_begin;
+		timeval m_stamp_end;
+		timeval m_stamp_last_begin;
+
 		MotionManager();
 		void adaptTorqueToVoltage();
 		void fallProtection();
+		void publishUDPData();
 
 	protected:
 
diff --git a/Framework/include/State.h b/Framework/include/State.h
new file mode 100644
index 0000000..487e2a1
--- /dev/null
+++ b/Framework/include/State.h
@@ -0,0 +1,94 @@
+#ifndef STATE_H_
+#define STATE_H_
+
+// Represents the current state of the robot and its perception of the world.
+struct State
+{
+    State();
+
+	int frameId; // A simple frame counter.
+	int stepId; // Number of detected steps.
+	double time; // Current real time since program start.
+	double lastIterationTime; // How long did the last iteration really take? (10 ms?)
+	double lastExecutionTime; // The execution time of the last rc iteration. (<< 10 ms)
+
+	double gyroX; // Sagittal gyro value.
+	double gyroY; // Lateral gyro value.
+	double accelerometerX; // Sagittal accelerometer value.
+	double accelerometerY; // Lateral accelerometer value.
+	double gyroBiasX; // Sagittal estimated gyro bias.
+	double gyroBiasY; // Lateral estimated gyro bias.
+	double fusedAngleX; // Estimated sagittal angle of the IMU fused from accelerometers and gyros.
+	double fusedAngleY; // Estimated lateral angle of the IMU fused from accelerometers and gyros.
+	double fusedAngularVelocityX; // Estimated sagittal angular velocity.
+	double fusedAngularVelocityY; // Estimated lateral angular velocity.
+
+	double maxTemperature; // The temperature of the hottest servo.
+	int maxTemperatureId; // The id of the hottest servo.
+	double batteryVoltage; // Measured battery voltage.
+
+	double orbitalEnergyX;
+	double orbitalEnergyY;
+	double timeToStep;
+
+	int supportExchange; // True if the support exchange has been detected in this iteration.
+	int supportLegSign; // Sign of the leg the robot is currently standing on. 1:right, -1:left
+
+	double gaitFrequency; // The currently used gait frequency.
+	double gaitPhase; // The current gait phase.
+
+	double gcvX; // Gait control vector (joystick input) in sagittal direction.
+	double gcvY; // Gait control vector (joystick input) in lateral direction.
+	double gcvZ; // Gait control vector (joystick input) in rotational direction.
+
+	// Joint angles set to the robot.
+	double txNeckZ;
+	double txLeftShoulderX;
+	double txLeftShoulderY;
+	double txLeftShoulderZ;
+	double txLeftElbowY;
+	double txLeftHipX;
+	double txLeftHipY;
+	double txLeftHipZ;
+	double txLeftKnee;
+	double txLeftAnkleX;
+	double txLeftAnkleY;
+	double txRightShoulderX;
+	double txRightShoulderY;
+	double txRightShoulderZ;
+	double txRightElbowY;
+	double txRightHipX;
+	double txRightHipY;
+	double txRightHipZ;
+	double txRightKnee;
+	double txRightAnkleX;
+	double txRightAnkleY;
+
+	// Joint angles received from the robot.
+	double rxNeckZ;
+	double rxLeftShoulderX;
+	double rxLeftShoulderY;
+	double rxLeftShoulderZ;
+	double rxLeftElbowY;
+	double rxLeftHipX;
+	double rxLeftHipY;
+	double rxLeftHipZ;
+	double rxLeftKnee;
+	double rxLeftAnkleX;
+	double rxLeftAnkleY;
+	double rxRightShoulderX;
+	double rxRightShoulderY;
+	double rxRightShoulderZ;
+	double rxRightElbowY;
+	double rxRightHipX;
+	double rxRightHipY;
+	double rxRightHipZ;
+	double rxRightKnee;
+	double rxRightAnkleX;
+	double rxRightAnkleY;
+};
+
+extern State state;
+
+#endif /* STATE_H_ */
+
diff --git a/Framework/src/State.cpp b/Framework/src/State.cpp
new file mode 100644
index 0000000..4bc3a69
--- /dev/null
+++ b/Framework/src/State.cpp
@@ -0,0 +1,166 @@
+#include "State.h"
+
+/*
+ * The State is a globally accessible, bufferable object with built in introspection
+ * capabilities.
+ *
+ * The primary function of the state is to provide a central and easily accessible place for
+ * the storage of system variables and objects, such as raw sensor values, higher level
+ * sensors values, outputs of behaviors, and debug values. The state
+ * is globally accessible, because it is needed and used everywhere in the RC, the
+ * behaviors, and the visualization parts. It makes it easy to provide read and write
+ * access to system variables, so that they don't have to be passed around between
+ * functions, and it doesn't require to declare pointers in every logical unit that
+ * wants to have access to the state. Anywhere in the code, just write for example
+ * state.rcTime to access the current time. All relevant state members are public. You can
+ * read and write them anywhere without cumbersome getters and setters. Also, the state
+ * object gets changed frequently during development. New sensors are introduced, behaviors
+ * are changed and more and more details are visualized. All this comes with the constant
+ * need to create or abandon state members. It would slow us down if we had to maintain
+ * numerous accessor functions that in most cases do nothing more than just passing on a
+ * value.
+ *
+ * Here is an overview of what the state object is used for in each cycle. First, raw
+ * sensor values are written into the state by the serial RobotInterface and the computer
+ * vision. Then the raw sensor values are used to compute higher level sensors which are
+ * added to the state by the robot control. The hierarchical behaviors read the sensor data,
+ * make decisions, write intermediate results and debug vectors into the state along with
+ * the motor commands, the final result of the behavior architecture. The GUI reads pretty
+ * much all state members for visualization, but it doesn't write anything into the state.
+ *
+ * The state object is not thread safe. Even though the vision thread, the RC thread
+ * and the GUI thread all access it at the same time. The reason why this works is due
+ * to the following facts. No state member is written from two different threads. Raw sensor
+ * values are only written by the RobotInterface or by the computer vision. The RC writes the
+ * higher level sensors and behaviors write their output. The GUI only reads state members.
+ * Therefore, it cannot happen that two threads try to concurrently write the same state
+ * member, where there result would be undefined. On x86 read and write operations on
+ * up to 8 aligned bytes (such as doubles) are atomic. That means that a half
+ * written double does not exist, which would be an undefined number that can do bad
+ * things to your robot. It is possible, however, that structures such a Vec3f are
+ * partially written by one thread, while another thread is reading it. Atomic doubles
+ * prevent the appearance of corrupt numbers, but it can happen that for example that x and y
+ * components are not in sync with the z component of the vector. As we expect sensor values
+ * to change continuously, and sensor values are the only input to the system after all, this
+ * is not a problem that would result in system failure.
+ *
+ * The state object is bufferable. This means that upon calling state.buffer(), the state
+ * object will add a copy of itself into an internal history with bounded length. To access
+ * a historical state object use for example state[-1].supportLegSign, which would tell you
+ * on which leg the robot was standing one buffered state before the current one. You can
+ * provide positive numbers as well, they are the same as using negative ones. Of course,
+ * the state is buffered once in each cycle. The few private members the state object needs
+ * for keeping the history and to implement the introspection features are static, so that
+ * they don't get copied when the state is buffered into history.
+ *
+ * The introspection capabilities are used for visualization. All state members can be displayed
+ * as time series on a graph. To select which variables you want to see, you want to click on
+ * their names, so they need to be associated with a string (key). Unlike Java, C++ does not
+ * have a native introspection interface, so the class meta data (keys) have to be provided
+ * manually. With each new or deleted state member, the header, the constructor, the init()
+ * method, and optionally the reset() method have to be changed. The header to declare the
+ * variable, the constructor to initialize it, the init() method to register a key and a reference
+ * to the member variable and the reset() method if you want the variable to be reset to an
+ * initial value when the RC is restarted. Of course it is displeasing having to go through
+ * four places just to declare one variable, but at least it's all in one object and there is
+ * an easy pattern to follow. On the upside, what you for the extra effort is index based and
+ * key based read access to the state members, such as state(0), which would be the program time,
+ * or state("txHipY") for the commanded position of the left hip y
+ * servo. These access methods are used by the GUI to map an index or a string selected by the
+ * user to state members for selective visualization. The introspection interface and the history
+ * are combinable. Here are some examples.
+ *
+ * state[-10](4) gives you the step counter from 10 cycles ago, because the step counter is the 4th
+ * member of State counting from 0.
+ *
+ * state[11]("fusedAngleX") gives you the lateral fused angle 11 cycles ago.
+ */
+
+State state;
+
+
+// In the constructor members should be initialized where needed.
+State::State()
+{
+	frameId = 0;
+	stepId = 0;
+	time = 0;
+	lastIterationTime = 0;
+	lastExecutionTime = 0;
+
+	gyroX = 0; // Sagittal gyro value.
+	gyroY = 0; // Lateral gyro value.
+	accelerometerX = 0; // Sagittal accelerometer value.
+	accelerometerY = 0; // Lateral accelerometer value.
+	gyroBiasX = 0; // Sagittal estimated gyro bias.
+	gyroBiasY = 0; // Lateral estimated gyro bias.
+	fusedAngleX = 0; // Estimated sagittal angle of the IMU fused from accelerometers and gyros.
+	fusedAngleX = 0; // Estimated lateral angle of the IMU fused from accelerometers and gyros.
+	fusedAngularVelocityX = 0; // Estimated sagittal angular velocity.
+	fusedAngularVelocityY = 0; // Estimated lateral angular velocity.
+
+	maxTemperature = 0; // The temperature of the hottest servo.
+	maxTemperatureId = 0; // The id of the hottest servo.
+	batteryVoltage = 0; // Measured battery voltage.
+
+	orbitalEnergyX = 0;
+	orbitalEnergyY = 0;
+	timeToStep = 0;
+
+	supportExchange = 0; // True if the support exchange has been detected in this iteration.
+	supportLegSign = 0; // Sign of the leg the robot is currently standing on. 1:right, -1:left
+
+	gaitFrequency = 0; // The currently used gait frequency.
+	gaitPhase = 0; // The current gait phase.
+
+	gcvX = 0; // Gait control vector (joystick input) in sagittal direction.
+	gcvY = 0; // Gait control vector (joystick input) in lateral direction.
+	gcvZ = 0; // Gait control vector (joystick input) in rotational direction.
+
+	// Joint angles set to the robot.
+	txNeckZ = 0;
+	txLeftShoulderX = 0;
+	txLeftShoulderY = 0;
+	txLeftShoulderZ = 0;
+	txLeftElbowY = 0;
+	txLeftHipX = 0;
+	txLeftHipY = 0;
+	txLeftHipZ = 0;
+	txLeftKnee = 0;
+	txLeftAnkleX = 0;
+	txLeftAnkleY = 0;
+	txRightShoulderX = 0;
+	txRightShoulderY = 0;
+	txRightShoulderZ = 0;
+	txRightElbowY = 0;
+	txRightHipX = 0;
+	txRightHipY = 0;
+	txRightHipZ = 0;
+	txRightKnee = 0;
+	txRightAnkleX = 0;
+	txRightAnkleY = 0;
+
+	// Joint angles received from the robot.
+	rxNeckZ = 0;
+	rxLeftShoulderX = 0;
+	rxLeftShoulderY = 0;
+	rxLeftShoulderZ = 0;
+	rxLeftElbowY = 0;
+	rxLeftHipX = 0;
+	rxLeftHipY = 0;
+	rxLeftHipZ = 0;
+	rxLeftKnee = 0;
+	rxLeftAnkleX = 0;
+	rxLeftAnkleY = 0;
+	rxRightShoulderX = 0;
+	rxRightShoulderY = 0;
+	rxRightShoulderZ = 0;
+	rxRightElbowY = 0;
+	rxRightHipX = 0;
+	rxRightHipY = 0;
+	rxRightHipZ = 0;
+	rxRightKnee = 0;
+	rxRightAnkleX = 0;
+	rxRightAnkleY = 0;
+
+}
diff --git a/Framework/src/motion/MotionManager.cpp b/Framework/src/motion/MotionManager.cpp
index 5641641..f950a13 100644
--- a/Framework/src/motion/MotionManager.cpp
+++ b/Framework/src/motion/MotionManager.cpp
@@ -12,6 +12,9 @@
 #include "MotionManager.h"
 #include <unistd.h>
 #include <assert.h>
+#include <string.h>
+#include <State.h>
+#include <sys/socket.h>
 
 using namespace Robot;
 
@@ -49,6 +52,20 @@ MotionManager::MotionManager() :
     assert((m_voltageLog = fopen("voltage.log", "w")));
     fprintf(m_voltageLog, "Voltage   Torque\n");
 #endif
+
+    gettimeofday(&m_stamp_init, 0);
+
+    m_udpSocket = socket(AF_INET, SOCK_DGRAM, 0);
+    assert(m_udpSocket >= 0);
+
+    int on = 1;
+    if(setsockopt(m_udpSocket, SOL_SOCKET, SO_BROADCAST, &on, sizeof(on)))
+        perror("setsockopt");
+
+    memset(&m_udpAddr, 0, sizeof(m_udpAddr));
+    m_udpAddr.sin_addr.s_addr = inet_addr("192.168.0.255");
+    m_udpAddr.sin_port = htons(5050);
+    m_udpAddr.sin_family = AF_INET;
 }
 
 MotionManager::~MotionManager()
@@ -107,8 +124,7 @@ bool MotionManager::Initialize(CM730 *cm730, bool fadeIn)
 	m_FBGyroCenter = 512;
 	m_RLGyroCenter = 512;
 
-
-	return true;
+    return true;
 }
 
 bool MotionManager::Reinitialize()
@@ -217,6 +233,8 @@ void MotionManager::SaveINISettings(minIni* ini, const std::string &section)
 #define MARGIN_OF_SD        2.0
 void MotionManager::Process()
 {
+    gettimeofday(&m_stamp_begin, 0);
+
     if(MotionStatus::FALL_MANAGER_STATE == MS_FADING_IN || MotionStatus::FALL_MANAGER_STATE == MS_RUNNING || MotionStatus::FALL_MANAGER_STATE == Robot::MS_READY_FOR_STANDUP)
     {
         if(m_fadeIn && m_torque_count < DEST_TORQUE) {
@@ -418,6 +436,9 @@ void MotionManager::Process()
         MotionStatus::BUTTON = m_CM730->m_BulkReadData[CM730::ID_CM].ReadByte(CM730::P_BUTTON);
 
     m_IsRunning = false;
+
+    gettimeofday(&m_stamp_end, 0);
+    publishUDPData();
 }
 
 void MotionManager::SetEnable(bool enable)
@@ -571,3 +592,22 @@ void MotionManager::fallProtection()
         }
     }
 }
+
+inline double tvToD(const timeval& tv)
+{
+    return ((double)tv.tv_sec) + ((double)tv.tv_usec / 1000 / 1000);
+}
+
+void MotionManager::publishUDPData()
+{
+    state.time = tvToD(m_stamp_end) - tvToD(m_stamp_init);
+    state.lastExecutionTime = tvToD(m_stamp_end) - tvToD(m_stamp_begin);
+    state.lastIterationTime = tvToD(m_stamp_begin) - tvToD(m_stamp_last_begin);
+    state.frameId++;
+    state.fusedAngleY = MotionStatus::ANGLE_PITCH;
+    state.fusedAngleX = MotionStatus::ANGLE_ROLL;
+
+    sendto(m_udpSocket, &state, sizeof(state), 0, (sockaddr*)&m_udpAddr, sizeof(m_udpAddr));
+
+    m_stamp_last_begin = m_stamp_begin;
+}
diff --git a/Framework/src/vision/BallTracker.cpp b/Framework/src/vision/BallTracker.cpp
index 1a497f5..81574cb 100644
--- a/Framework/src/vision/BallTracker.cpp
+++ b/Framework/src/vision/BallTracker.cpp
@@ -10,6 +10,7 @@
 #include "Camera.h"
 #include "ImgProcess.h"
 #include "BallTracker.h"
+#include <State.h>
 
 using namespace Robot;
 
@@ -39,6 +40,9 @@ void BallTracker::Process(Point2D pos)
 		}
 		else
 			Head::GetInstance()->InitTracking();
+
+        state.accelerometerX = -1000;
+        state.accelerometerY = -1000;
 	}
 	else
 	{
@@ -51,18 +55,27 @@ void BallTracker::Process(Point2D pos)
 		ball_position = offset;
 
 		const int KICK_OFFSET = 10 * (Camera::VIEW_H_ANGLE / (double)Camera::WIDTH);
-		if(m_offsetConfig){
+// 		if(m_offsetConfig){
 			m_offsetDir = ball_position.X > 0 ? 1 : -1;
-			m_offsetConfig = false;
-		}
+// 			m_offsetConfig = false;
+// 		}
 
 
-		if (m_offsetDir == 1)
-			ball_position.X -= KICK_OFFSET;
-		else if (m_offsetDir == -1)
+// 		if (m_offsetDir == 1)
+//         {
+// 			ball_position.X -= KICK_OFFSET;
+//             state.stepId = -KICK_OFFSET * 100;
+//         }
+// 		else if (m_offsetDir == -1)
+//         {
 			ball_position.X += KICK_OFFSET;
+            state.stepId = KICK_OFFSET * 100;
+//         }
 
 		Head::GetInstance()->MoveTracking(ball_position);
+
+        state.accelerometerX = ball_position.X;
+        state.accelerometerY = ball_position.Y;
 	}
 }
 
diff --git a/Linux/build/Makefile b/Linux/build/Makefile
index 1082ad4..8dc4666 100644
--- a/Linux/build/Makefile
+++ b/Linux/build/Makefile
@@ -20,6 +20,7 @@ CXXFLAGS += -O2 -DLINUX -Wall -g -shared $(INCLUDE_DIRS)
 LFLAGS += -lpthread -ldl
 
 OBJS =  ../../Framework/src/CM730.o     	\
+        ../../Framework/src/State.o         \
         ../../Framework/src/math/Matrix.o   \
         ../../Framework/src/math/Plane.o    \
         ../../Framework/src/math/Point.o    \
-- 
1.7.10.4

